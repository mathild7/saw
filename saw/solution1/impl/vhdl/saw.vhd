-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity saw is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of saw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "saw,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.483000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=3357,HLS_SYN_LUT=3833}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_4B800000 : STD_LOGIC_VECTOR (31 downto 0) := "01001011100000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_473B8000 : STD_LOGIC_VECTOR (31 downto 0) := "01000111001110111000000000000000";
    constant ap_const_lv32_4AFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "01001010111111111111111111111110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_BB80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011101110000000";
    constant ap_const_lv32_FFFE8900 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101000100100000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal out_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_vld_in : STD_LOGIC;
    signal out_V_1_vld_out : STD_LOGIC;
    signal out_V_1_ack_in : STD_LOGIC;
    signal out_V_1_ack_out : STD_LOGIC;
    signal out_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_1_sel : STD_LOGIC;
    signal out_V_1_load_A : STD_LOGIC;
    signal out_V_1_load_B : STD_LOGIC;
    signal out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_1_state_cmp_full : STD_LOGIC;
    signal freq : STD_LOGIC_VECTOR (31 downto 0);
    signal freq_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal freq_0_vld_reg : STD_LOGIC := '0';
    signal freq_0_ack_out : STD_LOGIC;
    signal vol : STD_LOGIC_VECTOR (31 downto 0);
    signal vol_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal vol_0_vld_reg : STD_LOGIC := '0';
    signal vol_0_ack_out : STD_LOGIC;
    signal user_writing_V : STD_LOGIC_VECTOR (0 downto 0);
    signal user_writing_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal user_writing_V_0_vld_reg : STD_LOGIC := '0';
    signal user_writing_V_0_ack_out : STD_LOGIC;
    signal val_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal err : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110100010010000000";
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_read_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal user_writing_V_read_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal vol_read_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fstep_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal p_Result_s_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal loc_V_1_fu_224_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_572 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_256_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_582 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_321_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_reg_588 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_12_fu_328_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_reg_593 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_s_fu_344_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_reg_603 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_1_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal loc_V_3_fu_376_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_3_reg_624 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_1_fu_390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_3_fu_408_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_reg_634 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_i_i_i1_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_i_i1_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_22_i_i_i1_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_i_i_i1_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_V_flag_phi_fu_125_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_V_flag_reg_121 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_3_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_509_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal val_V_new_phi_fu_140_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal val_V_new_reg_136 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_new_phi_fu_153_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_new_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_490_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_179_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_214_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast3_fu_228_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_232_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_i_i_i_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_i_i_i_cast_fu_252_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_i_i_i_fu_264_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_1_cast_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_280_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_13_i_i_i_cast4_fu_273_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_15_i_i_i_fu_283_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_16_i_i_i_fu_287_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_i_i_fu_293_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_1_fu_307_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_311_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal step_V_fu_334_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_2_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_2_fu_366_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i1_cast1_fu_380_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_i_i_i1_fu_398_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_i_i_i1_cast_fu_404_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_i_i_i9_fu_416_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_3_cast_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_cas_fu_432_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_13_i_i_i9_cast2_fu_425_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_15_i_i_i1_fu_435_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_16_i_i_i1_fu_439_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_21_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_i_i1_fu_445_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_16_fu_459_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_17_fu_463_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_4_fu_473_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_162_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_172_ce : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_179_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_condition_787 : BOOLEAN;

    component saw_faddfsub_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component saw_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component saw_fdiv_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component saw_sitofp_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component saw_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        freq : OUT STD_LOGIC_VECTOR (31 downto 0);
        vol : OUT STD_LOGIC_VECTOR (31 downto 0);
        user_writing_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    saw_CTRL_BUS_s_axi_U : component saw_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        freq => freq,
        vol => vol,
        user_writing_V => user_writing_V);

    saw_faddfsub_32nsbkb_U1 : component saw_faddfsub_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_162_p0,
        din1 => grp_fu_162_p1,
        opcode => grp_fu_162_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    saw_fmul_32ns_32ncud_U2 : component saw_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_166_p0,
        din1 => grp_fu_166_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    saw_fdiv_32ns_32ndEe_U3 : component saw_fdiv_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_172_p0,
        din1 => grp_fu_172_p1,
        ce => grp_fu_172_ce,
        dout => grp_fu_172_p2);

    saw_sitofp_32s_32_6_U4 : component saw_sitofp_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_179_p0,
        ce => grp_fu_179_ce,
        dout => grp_fu_179_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_1_ack_out) and (ap_const_logic_1 = out_V_1_vld_out))) then 
                                        out_V_1_sel_rd <= not(out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_in))) then 
                                        out_V_1_sel_wr <= not(out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_out) and (out_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = out_V_1_vld_in) and (out_V_1_state = ap_const_lv2_2)))) then 
                    out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_0 = out_V_1_ack_out) and (out_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = out_V_1_ack_out) and (out_V_1_state = ap_const_lv2_1)))) then 
                    out_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_V_1_vld_in) and (out_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = out_V_1_ack_out) and (out_V_1_state = ap_const_lv2_1)) or ((out_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_0 = out_V_1_ack_out))) and not(((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_out)))))) then 
                    out_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    err_new_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_787 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_3_fu_496_p2)) then 
                    err_new_reg_149 <= p_Val2_6_fu_490_p3;
                elsif ((ap_const_lv1_1 = tmp_3_fu_496_p2)) then 
                    err_new_reg_149 <= tmp_8_fu_502_p2;
                end if;
            end if; 
        end if;
    end process;

    freq_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    user_writing_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    val_V_flag_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = user_writing_V_read_reg_527) and (ap_const_lv1_1 = tmp_3_fu_496_p2)) or ((out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = user_writing_V_read_reg_527) and (ap_const_lv1_0 = tmp_3_fu_496_p2)))) then 
                val_V_flag_reg_121 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = grp_read_fu_96_p2))) then 
                val_V_flag_reg_121 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    val_V_new_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_787 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_3_fu_496_p2)) then 
                    val_V_new_reg_136 <= tmp_s_reg_603;
                elsif ((ap_const_lv1_1 = tmp_3_fu_496_p2)) then 
                    val_V_new_reg_136 <= tmp_9_fu_509_p2;
                end if;
            end if; 
        end if;
    end process;

    vol_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_1 = val_V_flag_phi_fu_125_p6))) then
                err <= err_new_phi_fu_153_p6;
                val_V <= val_V_new_phi_fu_140_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = freq_0_vld_reg)) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = freq_0_vld_reg) and (ap_const_logic_1 = freq_0_ack_out)))) then
                freq_0_data_reg <= freq;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                fstep_reg_561 <= grp_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                isNeg_1_reg_629 <= sh_assign_2_fu_384_p2(8 downto 8);
                loc_V_3_reg_624 <= loc_V_3_fu_376_p1;
                p_Result_1_reg_619 <= p_Val2_2_fu_354_p1(31 downto 31);
                sh_assign_3_reg_634 <= sh_assign_3_fu_408_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                isNeg_reg_577 <= sh_assign_fu_232_p2(8 downto 8);
                loc_V_1_reg_572 <= loc_V_1_fu_224_p1;
                p_Result_s_reg_567 <= p_Val2_s_fu_203_p1(31 downto 31);
                sh_assign_1_reg_582 <= sh_assign_1_fu_256_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_1_load_A)) then
                out_V_1_payload_A <= grp_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_1_load_B)) then
                out_V_1_payload_B <= grp_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_182 <= grp_fu_179_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state39))) then
                reg_189 <= grp_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_11_reg_588 <= tmp_11_fu_321_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = p_Result_s_reg_567))) then
                tmp_12_reg_593 <= tmp_12_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                    tmp_19_i_i_i1_reg_640(30 downto 0) <= tmp_19_i_i_i1_fu_480_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_lv1_1 = p_Result_1_reg_619))) then
                tmp_22_i_i_i1_reg_645 <= tmp_22_i_i_i1_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_2_reg_551 <= grp_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_7_reg_556 <= grp_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_s_reg_603 <= tmp_s_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = user_writing_V_0_vld_reg)) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = user_writing_V_0_vld_reg) and (ap_const_logic_1 = user_writing_V_0_ack_out)))) then
                user_writing_V_0_data_reg <= user_writing_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                user_writing_V_read_reg_527 <= user_writing_V_0_data_reg;
                vol_read_reg_531 <= vol_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = vol_0_vld_reg)) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = vol_0_vld_reg) and (ap_const_logic_1 = vol_0_ack_out)))) then
                vol_0_data_reg <= vol;
            end if;
        end if;
    end process;
    tmp_19_i_i_i1_reg_640(31) <= '0';

    ap_NS_fsm_assign_proc : process (out_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state27, ap_CS_fsm_state28, grp_read_fu_96_p2, ap_CS_fsm_state2, ap_CS_fsm_state42)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = grp_read_fu_96_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_condition_787_assign_proc : process(out_V_1_ack_in, user_writing_V_read_reg_527, ap_CS_fsm_state42)
    begin
                ap_condition_787 <= ((out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = user_writing_V_read_reg_527));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    err_new_phi_fu_153_p6_assign_proc : process(user_writing_V_read_reg_527, ap_CS_fsm_state42, tmp_3_fu_496_p2, tmp_8_fu_502_p2, err_new_reg_149, p_Val2_6_fu_490_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = user_writing_V_read_reg_527))) then
            if ((ap_const_lv1_0 = tmp_3_fu_496_p2)) then 
                err_new_phi_fu_153_p6 <= p_Val2_6_fu_490_p3;
            elsif ((ap_const_lv1_1 = tmp_3_fu_496_p2)) then 
                err_new_phi_fu_153_p6 <= tmp_8_fu_502_p2;
            else 
                err_new_phi_fu_153_p6 <= err_new_reg_149;
            end if;
        else 
            err_new_phi_fu_153_p6 <= err_new_reg_149;
        end if; 
    end process;


    freq_0_ack_out_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            freq_0_ack_out <= ap_const_logic_1;
        else 
            freq_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_162_opcode_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_162_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_162_opcode <= ap_const_lv2_0;
        else 
            grp_fu_162_opcode <= "XX";
        end if; 
    end process;


    grp_fu_162_p0_assign_proc : process(reg_182, fstep_reg_561, ap_CS_fsm_state30, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_162_p0 <= reg_182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_162_p0 <= fstep_reg_561;
        else 
            grp_fu_162_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_162_p1_assign_proc : process(reg_182, reg_189, ap_CS_fsm_state30, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_162_p1 <= reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_162_p1 <= reg_182;
        else 
            grp_fu_162_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_166_p0_assign_proc : process(freq_0_data_reg, reg_182, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_166_p0 <= reg_182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_166_p0 <= freq_0_data_reg;
        else 
            grp_fu_166_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_166_p1_assign_proc : process(ap_CS_fsm_state2, vol_read_reg_531, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_166_p1 <= vol_read_reg_531;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_166_p1 <= ap_const_lv32_4B800000;
        else 
            grp_fu_166_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_172_ce_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state39, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_0 = out_V_1_ack_in)) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_172_ce <= ap_const_logic_0;
        else 
            grp_fu_172_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_172_p0_assign_proc : process(tmp_2_reg_551, tmp_7_reg_556, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_172_p0 <= tmp_7_reg_556;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_172_p0 <= tmp_2_reg_551;
        else 
            grp_fu_172_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_172_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_172_p1 <= ap_const_lv32_4AFFFFFE;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_172_p1 <= ap_const_lv32_473B8000;
        else 
            grp_fu_172_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_179_ce_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state6, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (out_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (out_V_1_ack_in = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_179_ce <= ap_const_logic_1;
        else 
            grp_fu_179_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_179_p0_assign_proc : process(err, ap_CS_fsm_state29, ap_CS_fsm_state2, tmp_14_fu_198_p1, tmp_13_fu_339_p1, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_179_p0 <= err;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_179_p0 <= tmp_13_fu_339_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_179_p0 <= tmp_14_fu_198_p1;
        else 
            grp_fu_179_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_read_fu_96_p2 <= user_writing_V_0_data_reg;
    isNeg_1_fu_390_p3 <= sh_assign_2_fu_384_p2(8 downto 8);
    isNeg_fu_238_p3 <= sh_assign_fu_232_p2(8 downto 8);
    loc_V_1_fu_224_p1 <= p_Val2_s_fu_203_p1(23 - 1 downto 0);
    loc_V_2_fu_366_p4 <= p_Val2_2_fu_354_p1(30 downto 23);
    loc_V_3_fu_376_p1 <= p_Val2_2_fu_354_p1(23 - 1 downto 0);
    loc_V_fu_214_p4 <= p_Val2_s_fu_203_p1(30 downto 23);
    out_V_1_ack_in <= out_V_1_state(1);
    out_V_1_ack_out <= out_V_TREADY;

    out_V_1_data_out_assign_proc : process(out_V_1_payload_A, out_V_1_payload_B, out_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_V_1_sel)) then 
            out_V_1_data_out <= out_V_1_payload_B;
        else 
            out_V_1_data_out <= out_V_1_payload_A;
        end if; 
    end process;

    out_V_1_load_A <= (out_V_1_state_cmp_full and not(out_V_1_sel_wr));
    out_V_1_load_B <= (out_V_1_sel_wr and out_V_1_state_cmp_full);
    out_V_1_sel <= out_V_1_sel_rd;
    out_V_1_state_cmp_full <= '0' when (out_V_1_state = ap_const_lv2_1) else '1';

    out_V_1_vld_in_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_V_1_ack_in = ap_const_logic_1))) then 
            out_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_1_vld_out <= out_V_1_state(0);
    out_V_TDATA <= out_V_1_data_out;

    out_V_TDATA_blk_n_assign_proc : process(out_V_1_state, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            out_V_TDATA_blk_n <= out_V_1_state(1);
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_TVALID <= out_V_1_state(0);
    p_Val2_2_fu_354_p1 <= reg_189;
    p_Val2_4_fu_473_p3 <= 
        tmp_16_fu_459_p1 when (isNeg_1_reg_629(0) = '1') else 
        tmp_17_fu_463_p4;
    p_Val2_6_fu_490_p3 <= 
        tmp_22_i_i_i1_reg_645 when (p_Result_1_reg_619(0) = '1') else 
        tmp_19_i_i_i1_reg_640;
    p_Val2_s_fu_203_p1 <= fstep_reg_561;
        sh_assign_1_cast_cas_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_582),25));

        sh_assign_1_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_582),32));

    sh_assign_1_fu_256_p3 <= 
        tmp_14_i_i_i_cast_fu_252_p1 when (isNeg_fu_238_p3(0) = '1') else 
        sh_assign_fu_232_p2;
    sh_assign_2_fu_384_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i1_cast1_fu_380_p1));
        sh_assign_3_cast_cas_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_reg_634),25));

        sh_assign_3_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_reg_634),32));

    sh_assign_3_fu_408_p3 <= 
        tmp_14_i_i_i1_cast_fu_404_p1 when (isNeg_1_fu_390_p3(0) = '1') else 
        sh_assign_2_fu_384_p2;
    sh_assign_fu_232_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast3_fu_228_p1));
    step_V_fu_334_p3 <= 
        tmp_12_reg_593 when (p_Result_s_reg_567(0) = '1') else 
        tmp_11_reg_588;
    tmp_10_fu_311_p4 <= tmp_17_i_i_i_fu_293_p2(47 downto 24);
    tmp_11_fu_321_p3 <= 
        tmp_1_fu_307_p1 when (isNeg_reg_577(0) = '1') else 
        tmp_10_fu_311_p4;
    tmp_12_fu_328_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(tmp_11_fu_321_p3));
        tmp_13_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(step_V_fu_334_p3),32));

    tmp_13_i_i_i9_cast2_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_i_i_i9_fu_416_p4),79));
    tmp_13_i_i_i9_fu_416_p4 <= ((ap_const_lv1_1 & loc_V_3_reg_624) & ap_const_lv1_0);
    tmp_13_i_i_i_cast4_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_i_i_i_fu_264_p4),79));
    tmp_13_i_i_i_fu_264_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_572) & ap_const_lv1_0);
        tmp_14_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(val_V),32));

        tmp_14_i_i_i1_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_i_i_i1_fu_398_p2),9));

    tmp_14_i_i_i1_fu_398_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_2_fu_366_p4));
        tmp_14_i_i_i_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_i_i_i_fu_246_p2),9));

    tmp_14_i_i_i_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_214_p4));
    tmp_15_i_i_i1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_429_p1),79));
    tmp_15_i_i_i_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_277_p1),79));
    tmp_16_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_451_p3),31));
    tmp_16_i_i_i1_fu_439_p2 <= std_logic_vector(shift_right(unsigned(tmp_13_i_i_i9_fu_416_p4),to_integer(unsigned('0' & sh_assign_3_cast_cas_fu_432_p1(25-1 downto 0)))));
    tmp_16_i_i_i_fu_287_p2 <= std_logic_vector(shift_right(unsigned(tmp_13_i_i_i_fu_264_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_280_p1(25-1 downto 0)))));
    tmp_17_fu_463_p4 <= tmp_17_i_i_i1_fu_445_p2(54 downto 24);
    tmp_17_i_i_i1_fu_445_p2 <= std_logic_vector(shift_left(unsigned(tmp_13_i_i_i9_cast2_fu_425_p1),to_integer(unsigned('0' & tmp_15_i_i_i1_fu_435_p1(31-1 downto 0)))));
    tmp_17_i_i_i_fu_293_p2 <= std_logic_vector(shift_left(unsigned(tmp_13_i_i_i_cast4_fu_273_p1),to_integer(unsigned('0' & tmp_15_i_i_i_fu_283_p1(31-1 downto 0)))));
    tmp_19_i_i_i1_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_fu_473_p3),32));
    tmp_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_299_p3),24));
    tmp_21_fu_451_p3 <= tmp_16_i_i_i1_fu_439_p2(24 downto 24);
    tmp_22_i_i_i1_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_19_i_i_i1_fu_480_p1));
    tmp_3_fu_496_p2 <= "1" when (signed(p_Val2_6_fu_490_p3) > signed(ap_const_lv32_BB80)) else "0";
    tmp_8_fu_502_p2 <= std_logic_vector(unsigned(p_Val2_6_fu_490_p3) + unsigned(ap_const_lv32_FFFE8900));
    tmp_9_fu_509_p2 <= std_logic_vector(unsigned(tmp_s_reg_603) + unsigned(ap_const_lv24_1));
    tmp_fu_299_p3 <= tmp_16_i_i_i_fu_287_p2(24 downto 24);
    tmp_i_i_i_i1_cast1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_366_p4),9));
    tmp_i_i_i_i_cast3_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_214_p4),9));
    tmp_s_fu_344_p2 <= std_logic_vector(unsigned(step_V_fu_334_p3) + unsigned(val_V));

    user_writing_V_0_ack_out_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            user_writing_V_0_ack_out <= ap_const_logic_1;
        else 
            user_writing_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    val_V_flag_phi_fu_125_p6_assign_proc : process(user_writing_V_read_reg_527, val_V_flag_reg_121, ap_CS_fsm_state42, tmp_3_fu_496_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = user_writing_V_read_reg_527) and (ap_const_lv1_1 = tmp_3_fu_496_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = user_writing_V_read_reg_527) and (ap_const_lv1_0 = tmp_3_fu_496_p2)))) then 
            val_V_flag_phi_fu_125_p6 <= ap_const_lv1_1;
        else 
            val_V_flag_phi_fu_125_p6 <= val_V_flag_reg_121;
        end if; 
    end process;


    val_V_new_phi_fu_140_p6_assign_proc : process(user_writing_V_read_reg_527, tmp_s_reg_603, ap_CS_fsm_state42, tmp_3_fu_496_p2, tmp_9_fu_509_p2, val_V_new_reg_136)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = user_writing_V_read_reg_527))) then
            if ((ap_const_lv1_0 = tmp_3_fu_496_p2)) then 
                val_V_new_phi_fu_140_p6 <= tmp_s_reg_603;
            elsif ((ap_const_lv1_1 = tmp_3_fu_496_p2)) then 
                val_V_new_phi_fu_140_p6 <= tmp_9_fu_509_p2;
            else 
                val_V_new_phi_fu_140_p6 <= val_V_new_reg_136;
            end if;
        else 
            val_V_new_phi_fu_140_p6 <= val_V_new_reg_136;
        end if; 
    end process;


    vol_0_ack_out_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            vol_0_ack_out <= ap_const_logic_1;
        else 
            vol_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

end behav;
