// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="saw,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.483000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=3357,HLS_SYN_LUT=3833}" *)

module saw (
        ap_clk,
        ap_rst_n,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_state2 = 42'd2;
parameter    ap_ST_fsm_state3 = 42'd4;
parameter    ap_ST_fsm_state4 = 42'd8;
parameter    ap_ST_fsm_state5 = 42'd16;
parameter    ap_ST_fsm_state6 = 42'd32;
parameter    ap_ST_fsm_state7 = 42'd64;
parameter    ap_ST_fsm_state8 = 42'd128;
parameter    ap_ST_fsm_state9 = 42'd256;
parameter    ap_ST_fsm_state10 = 42'd512;
parameter    ap_ST_fsm_state11 = 42'd1024;
parameter    ap_ST_fsm_state12 = 42'd2048;
parameter    ap_ST_fsm_state13 = 42'd4096;
parameter    ap_ST_fsm_state14 = 42'd8192;
parameter    ap_ST_fsm_state15 = 42'd16384;
parameter    ap_ST_fsm_state16 = 42'd32768;
parameter    ap_ST_fsm_state17 = 42'd65536;
parameter    ap_ST_fsm_state18 = 42'd131072;
parameter    ap_ST_fsm_state19 = 42'd262144;
parameter    ap_ST_fsm_state20 = 42'd524288;
parameter    ap_ST_fsm_state21 = 42'd1048576;
parameter    ap_ST_fsm_state22 = 42'd2097152;
parameter    ap_ST_fsm_state23 = 42'd4194304;
parameter    ap_ST_fsm_state24 = 42'd8388608;
parameter    ap_ST_fsm_state25 = 42'd16777216;
parameter    ap_ST_fsm_state26 = 42'd33554432;
parameter    ap_ST_fsm_state27 = 42'd67108864;
parameter    ap_ST_fsm_state28 = 42'd134217728;
parameter    ap_ST_fsm_state29 = 42'd268435456;
parameter    ap_ST_fsm_state30 = 42'd536870912;
parameter    ap_ST_fsm_state31 = 42'd1073741824;
parameter    ap_ST_fsm_state32 = 42'd2147483648;
parameter    ap_ST_fsm_state33 = 42'd4294967296;
parameter    ap_ST_fsm_state34 = 42'd8589934592;
parameter    ap_ST_fsm_state35 = 42'd17179869184;
parameter    ap_ST_fsm_state36 = 42'd34359738368;
parameter    ap_ST_fsm_state37 = 42'd68719476736;
parameter    ap_ST_fsm_state38 = 42'd137438953472;
parameter    ap_ST_fsm_state39 = 42'd274877906944;
parameter    ap_ST_fsm_state40 = 42'd549755813888;
parameter    ap_ST_fsm_state41 = 42'd1099511627776;
parameter    ap_ST_fsm_state42 = 42'd2199023255552;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] out_V_1_data_out;
reg    out_V_1_vld_in;
wire    out_V_1_vld_out;
wire    out_V_1_ack_in;
wire    out_V_1_ack_out;
reg   [31:0] out_V_1_payload_A;
reg   [31:0] out_V_1_payload_B;
reg    out_V_1_sel_rd;
reg    out_V_1_sel_wr;
wire    out_V_1_sel;
wire    out_V_1_load_A;
wire    out_V_1_load_B;
reg   [1:0] out_V_1_state;
wire    out_V_1_state_cmp_full;
wire   [31:0] freq;
reg   [31:0] freq_0_data_reg;
reg    freq_0_vld_reg;
reg    freq_0_ack_out;
wire   [31:0] vol;
reg   [31:0] vol_0_data_reg;
reg    vol_0_vld_reg;
reg    vol_0_ack_out;
wire   [0:0] user_writing_V;
reg   [0:0] user_writing_V_0_data_reg;
reg    user_writing_V_0_vld_reg;
reg    user_writing_V_0_ack_out;
reg   [23:0] val_V;
reg   [31:0] err;
reg    out_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_179_p1;
reg   [31:0] reg_182;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_162_p2;
reg   [31:0] reg_189;
wire    ap_CS_fsm_state39;
wire   [0:0] grp_read_fu_96_p2;
reg   [0:0] user_writing_V_read_reg_527;
wire    ap_CS_fsm_state2;
reg   [31:0] vol_read_reg_531;
wire  signed [31:0] tmp_14_fu_198_p1;
wire   [31:0] grp_fu_166_p2;
reg   [31:0] tmp_2_reg_551;
wire    ap_CS_fsm_state5;
reg   [31:0] tmp_7_reg_556;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_172_p2;
reg   [31:0] fstep_reg_561;
wire    ap_CS_fsm_state21;
reg   [0:0] p_Result_s_reg_567;
wire    ap_CS_fsm_state22;
wire   [22:0] loc_V_1_fu_224_p1;
reg   [22:0] loc_V_1_reg_572;
wire   [0:0] isNeg_fu_238_p3;
reg   [0:0] isNeg_reg_577;
wire   [8:0] sh_assign_1_fu_256_p3;
reg   [8:0] sh_assign_1_reg_582;
wire   [23:0] tmp_11_fu_321_p3;
reg   [23:0] tmp_11_reg_588;
wire    ap_CS_fsm_state23;
wire   [23:0] tmp_12_fu_328_p2;
reg   [23:0] tmp_12_reg_593;
wire  signed [31:0] tmp_13_fu_339_p1;
wire    ap_CS_fsm_state24;
wire   [23:0] tmp_s_fu_344_p2;
reg   [23:0] tmp_s_reg_603;
reg   [0:0] p_Result_1_reg_619;
wire    ap_CS_fsm_state40;
wire   [22:0] loc_V_3_fu_376_p1;
reg   [22:0] loc_V_3_reg_624;
wire   [0:0] isNeg_1_fu_390_p3;
reg   [0:0] isNeg_1_reg_629;
wire   [8:0] sh_assign_3_fu_408_p3;
reg   [8:0] sh_assign_3_reg_634;
wire   [31:0] tmp_19_i_i_i1_fu_480_p1;
reg   [31:0] tmp_19_i_i_i1_reg_640;
wire    ap_CS_fsm_state41;
wire   [31:0] tmp_22_i_i_i1_fu_484_p2;
reg   [31:0] tmp_22_i_i_i1_reg_645;
reg   [0:0] val_V_flag_phi_fu_125_p6;
reg   [0:0] val_V_flag_reg_121;
wire    ap_CS_fsm_state42;
wire   [0:0] tmp_3_fu_496_p2;
wire   [23:0] tmp_9_fu_509_p2;
reg   [23:0] val_V_new_phi_fu_140_p6;
reg   [23:0] val_V_new_reg_136;
wire   [31:0] tmp_8_fu_502_p2;
reg   [31:0] err_new_phi_fu_153_p6;
reg   [31:0] err_new_reg_149;
wire   [31:0] p_Val2_6_fu_490_p3;
reg   [31:0] grp_fu_162_p0;
reg   [31:0] grp_fu_162_p1;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state35;
reg   [31:0] grp_fu_166_p0;
reg   [31:0] grp_fu_166_p1;
wire    ap_CS_fsm_state8;
reg   [31:0] grp_fu_172_p0;
reg   [31:0] grp_fu_172_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state12;
reg  signed [31:0] grp_fu_179_p0;
wire   [31:0] p_Val2_s_fu_203_p1;
wire   [7:0] loc_V_fu_214_p4;
wire   [8:0] tmp_i_i_i_i_cast3_fu_228_p1;
wire   [8:0] sh_assign_fu_232_p2;
wire   [7:0] tmp_14_i_i_i_fu_246_p2;
wire  signed [8:0] tmp_14_i_i_i_cast_fu_252_p1;
wire   [24:0] tmp_13_i_i_i_fu_264_p4;
wire  signed [31:0] sh_assign_1_cast_fu_277_p1;
wire  signed [24:0] sh_assign_1_cast_cas_fu_280_p1;
wire   [78:0] tmp_13_i_i_i_cast4_fu_273_p1;
wire   [78:0] tmp_15_i_i_i_fu_283_p1;
wire   [24:0] tmp_16_i_i_i_fu_287_p2;
wire   [0:0] tmp_fu_299_p3;
wire   [78:0] tmp_17_i_i_i_fu_293_p2;
wire   [23:0] tmp_1_fu_307_p1;
wire   [23:0] tmp_10_fu_311_p4;
wire   [23:0] step_V_fu_334_p3;
wire   [31:0] p_Val2_2_fu_354_p1;
wire   [7:0] loc_V_2_fu_366_p4;
wire   [8:0] tmp_i_i_i_i1_cast1_fu_380_p1;
wire   [8:0] sh_assign_2_fu_384_p2;
wire   [7:0] tmp_14_i_i_i1_fu_398_p2;
wire  signed [8:0] tmp_14_i_i_i1_cast_fu_404_p1;
wire   [24:0] tmp_13_i_i_i9_fu_416_p4;
wire  signed [31:0] sh_assign_3_cast_fu_429_p1;
wire  signed [24:0] sh_assign_3_cast_cas_fu_432_p1;
wire   [78:0] tmp_13_i_i_i9_cast2_fu_425_p1;
wire   [78:0] tmp_15_i_i_i1_fu_435_p1;
wire   [24:0] tmp_16_i_i_i1_fu_439_p2;
wire   [0:0] tmp_21_fu_451_p3;
wire   [78:0] tmp_17_i_i_i1_fu_445_p2;
wire   [30:0] tmp_16_fu_459_p1;
wire   [30:0] tmp_17_fu_463_p4;
wire   [30:0] p_Val2_4_fu_473_p3;
reg   [1:0] grp_fu_162_opcode;
reg    grp_fu_172_ce;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
reg    grp_fu_179_ce;
reg   [41:0] ap_NS_fsm;
reg    ap_condition_787;

// power-on initialization
initial begin
#0 out_V_1_sel_rd = 1'b0;
#0 out_V_1_sel_wr = 1'b0;
#0 out_V_1_state = 2'd0;
#0 freq_0_data_reg = 32'd0;
#0 freq_0_vld_reg = 1'b0;
#0 vol_0_data_reg = 32'd0;
#0 vol_0_vld_reg = 1'b0;
#0 user_writing_V_0_data_reg = 1'd0;
#0 user_writing_V_0_vld_reg = 1'b0;
#0 val_V = 24'd0;
#0 err = 32'd4294919296;
#0 ap_CS_fsm = 42'd1;
end

saw_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
saw_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .freq(freq),
    .vol(vol),
    .user_writing_V(user_writing_V)
);

saw_faddfsub_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
saw_faddfsub_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_162_p0),
    .din1(grp_fu_162_p1),
    .opcode(grp_fu_162_opcode),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

saw_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
saw_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_166_p0),
    .din1(grp_fu_166_p1),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

saw_fdiv_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
saw_fdiv_32ns_32ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_172_p0),
    .din1(grp_fu_172_p1),
    .ce(grp_fu_172_ce),
    .dout(grp_fu_172_p2)
);

saw_sitofp_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
saw_sitofp_32s_32_6_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_179_p0),
    .ce(grp_fu_179_ce),
    .dout(grp_fu_179_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_ack_out) & (1'b1 == out_V_1_vld_out))) begin
            out_V_1_sel_rd <= ~out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_in))) begin
            out_V_1_sel_wr <= ~out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out) & (out_V_1_state == 2'd3)) | ((1'b0 == out_V_1_vld_in) & (out_V_1_state == 2'd2)))) begin
            out_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out) & (out_V_1_state == 2'd3)) | ((1'b0 == out_V_1_ack_out) & (out_V_1_state == 2'd1)))) begin
            out_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_V_1_vld_in) & (out_V_1_state == 2'd2)) | ((1'b1 == out_V_1_ack_out) & (out_V_1_state == 2'd1)) | ((out_V_1_state == 2'd3) & ~((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out)) & ~((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out))))) begin
            out_V_1_state <= 2'd3;
        end else begin
            out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_787 == 1'b1)) begin
        if ((1'd0 == tmp_3_fu_496_p2)) begin
            err_new_reg_149 <= p_Val2_6_fu_490_p3;
        end else if ((1'd1 == tmp_3_fu_496_p2)) begin
            err_new_reg_149 <= tmp_8_fu_502_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42) & (1'd0 == user_writing_V_read_reg_527) & (1'd1 == tmp_3_fu_496_p2)) | ((out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42) & (1'd0 == user_writing_V_read_reg_527) & (1'd0 == tmp_3_fu_496_p2)))) begin
        val_V_flag_reg_121 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == grp_read_fu_96_p2))) begin
        val_V_flag_reg_121 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_787 == 1'b1)) begin
        if ((1'd0 == tmp_3_fu_496_p2)) begin
            val_V_new_reg_136 <= tmp_s_reg_603;
        end else if ((1'd1 == tmp_3_fu_496_p2)) begin
            val_V_new_reg_136 <= tmp_9_fu_509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42) & (1'd1 == val_V_flag_phi_fu_125_p6))) begin
        err <= err_new_phi_fu_153_p6;
        val_V <= val_V_new_phi_fu_140_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (1'b0 == freq_0_vld_reg)) | ((1'b1 == 1'b1) & (1'b1 == freq_0_vld_reg) & (1'b1 == freq_0_ack_out)))) begin
        freq_0_data_reg <= freq;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        fstep_reg_561 <= grp_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        isNeg_1_reg_629 <= sh_assign_2_fu_384_p2[32'd8];
        loc_V_3_reg_624 <= loc_V_3_fu_376_p1;
        p_Result_1_reg_619 <= p_Val2_2_fu_354_p1[32'd31];
        sh_assign_3_reg_634 <= sh_assign_3_fu_408_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        isNeg_reg_577 <= sh_assign_fu_232_p2[32'd8];
        loc_V_1_reg_572 <= loc_V_1_fu_224_p1;
        p_Result_s_reg_567 <= p_Val2_s_fu_203_p1[32'd31];
        sh_assign_1_reg_582 <= sh_assign_1_fu_256_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_A)) begin
        out_V_1_payload_A <= grp_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_B)) begin
        out_V_1_payload_B <= grp_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state34))) begin
        reg_182 <= grp_fu_179_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state39))) begin
        reg_189 <= grp_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_11_reg_588 <= tmp_11_fu_321_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == p_Result_s_reg_567))) begin
        tmp_12_reg_593 <= tmp_12_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_19_i_i_i1_reg_640[30 : 0] <= tmp_19_i_i_i1_fu_480_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (1'd1 == p_Result_1_reg_619))) begin
        tmp_22_i_i_i1_reg_645 <= tmp_22_i_i_i1_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_2_reg_551 <= grp_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_7_reg_556 <= grp_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_s_reg_603 <= tmp_s_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (1'b0 == user_writing_V_0_vld_reg)) | ((1'b1 == 1'b1) & (1'b1 == user_writing_V_0_vld_reg) & (1'b1 == user_writing_V_0_ack_out)))) begin
        user_writing_V_0_data_reg <= user_writing_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        user_writing_V_read_reg_527 <= user_writing_V_0_data_reg;
        vol_read_reg_531 <= vol_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (1'b0 == vol_0_vld_reg)) | ((1'b1 == 1'b1) & (1'b1 == vol_0_vld_reg) & (1'b1 == vol_0_ack_out)))) begin
        vol_0_data_reg <= vol;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) & (1'd0 == user_writing_V_read_reg_527))) begin
        if ((1'd0 == tmp_3_fu_496_p2)) begin
            err_new_phi_fu_153_p6 = p_Val2_6_fu_490_p3;
        end else if ((1'd1 == tmp_3_fu_496_p2)) begin
            err_new_phi_fu_153_p6 = tmp_8_fu_502_p2;
        end else begin
            err_new_phi_fu_153_p6 = err_new_reg_149;
        end
    end else begin
        err_new_phi_fu_153_p6 = err_new_reg_149;
    end
end

always @ (*) begin
    if (((out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        freq_0_ack_out = 1'b1;
    end else begin
        freq_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_162_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_162_opcode = 2'd0;
    end else begin
        grp_fu_162_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_162_p0 = reg_182;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_162_p0 = fstep_reg_561;
    end else begin
        grp_fu_162_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_162_p1 = reg_189;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_162_p1 = reg_182;
    end else begin
        grp_fu_162_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_166_p0 = reg_182;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_166_p0 = freq_0_data_reg;
    end else begin
        grp_fu_166_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_166_p1 = vol_read_reg_531;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_166_p1 = 32'd1266679808;
    end else begin
        grp_fu_166_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state35) | ((1'b1 == ap_CS_fsm_state27) & (1'b0 == out_V_1_ack_in)) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38))) begin
        grp_fu_172_ce = 1'b0;
    end else begin
        grp_fu_172_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_172_p0 = tmp_7_reg_556;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_172_p0 = tmp_2_reg_551;
    end else begin
        grp_fu_172_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_172_p1 = 32'd1258291198;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_172_p1 = 32'd1195081728;
    end else begin
        grp_fu_172_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state24) | ((1'b1 == ap_CS_fsm_state27) & (out_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (out_V_1_ack_in == 1'b1)) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_179_ce = 1'b1;
    end else begin
        grp_fu_179_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_179_p0 = err;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_179_p0 = tmp_13_fu_339_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_179_p0 = tmp_14_fu_198_p1;
    end else begin
        grp_fu_179_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == out_V_1_sel)) begin
        out_V_1_data_out = out_V_1_payload_B;
    end else begin
        out_V_1_data_out = out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (out_V_1_ack_in == 1'b1))) begin
        out_V_1_vld_in = 1'b1;
    end else begin
        out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28))) begin
        out_V_TDATA_blk_n = out_V_1_state[1'd1];
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        user_writing_V_0_ack_out = 1'b1;
    end else begin
        user_writing_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state42) & (1'd0 == user_writing_V_read_reg_527) & (1'd1 == tmp_3_fu_496_p2)) | ((1'b1 == ap_CS_fsm_state42) & (1'd0 == user_writing_V_read_reg_527) & (1'd0 == tmp_3_fu_496_p2)))) begin
        val_V_flag_phi_fu_125_p6 = 1'd1;
    end else begin
        val_V_flag_phi_fu_125_p6 = val_V_flag_reg_121;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) & (1'd0 == user_writing_V_read_reg_527))) begin
        if ((1'd0 == tmp_3_fu_496_p2)) begin
            val_V_new_phi_fu_140_p6 = tmp_s_reg_603;
        end else if ((1'd1 == tmp_3_fu_496_p2)) begin
            val_V_new_phi_fu_140_p6 = tmp_9_fu_509_p2;
        end else begin
            val_V_new_phi_fu_140_p6 = val_V_new_reg_136;
        end
    end else begin
        val_V_new_phi_fu_140_p6 = val_V_new_reg_136;
    end
end

always @ (*) begin
    if (((out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        vol_0_ack_out = 1'b1;
    end else begin
        vol_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == grp_read_fu_96_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_condition_787 = ((out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42) & (1'd0 == user_writing_V_read_reg_527));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_read_fu_96_p2 = user_writing_V_0_data_reg;

assign isNeg_1_fu_390_p3 = sh_assign_2_fu_384_p2[32'd8];

assign isNeg_fu_238_p3 = sh_assign_fu_232_p2[32'd8];

assign loc_V_1_fu_224_p1 = p_Val2_s_fu_203_p1[22:0];

assign loc_V_2_fu_366_p4 = {{p_Val2_2_fu_354_p1[30:23]}};

assign loc_V_3_fu_376_p1 = p_Val2_2_fu_354_p1[22:0];

assign loc_V_fu_214_p4 = {{p_Val2_s_fu_203_p1[30:23]}};

assign out_V_1_ack_in = out_V_1_state[1'd1];

assign out_V_1_ack_out = out_V_TREADY;

assign out_V_1_load_A = (out_V_1_state_cmp_full & ~out_V_1_sel_wr);

assign out_V_1_load_B = (out_V_1_sel_wr & out_V_1_state_cmp_full);

assign out_V_1_sel = out_V_1_sel_rd;

assign out_V_1_state_cmp_full = ((out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_1_vld_out = out_V_1_state[1'd0];

assign out_V_TDATA = out_V_1_data_out;

assign out_V_TVALID = out_V_1_state[1'd0];

assign p_Val2_2_fu_354_p1 = reg_189;

assign p_Val2_4_fu_473_p3 = ((isNeg_1_reg_629[0:0] === 1'b1) ? tmp_16_fu_459_p1 : tmp_17_fu_463_p4);

assign p_Val2_6_fu_490_p3 = ((p_Result_1_reg_619[0:0] === 1'b1) ? tmp_22_i_i_i1_reg_645 : tmp_19_i_i_i1_reg_640);

assign p_Val2_s_fu_203_p1 = fstep_reg_561;

assign sh_assign_1_cast_cas_fu_280_p1 = $signed(sh_assign_1_reg_582);

assign sh_assign_1_cast_fu_277_p1 = $signed(sh_assign_1_reg_582);

assign sh_assign_1_fu_256_p3 = ((isNeg_fu_238_p3[0:0] === 1'b1) ? tmp_14_i_i_i_cast_fu_252_p1 : sh_assign_fu_232_p2);

assign sh_assign_2_fu_384_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i1_cast1_fu_380_p1));

assign sh_assign_3_cast_cas_fu_432_p1 = $signed(sh_assign_3_reg_634);

assign sh_assign_3_cast_fu_429_p1 = $signed(sh_assign_3_reg_634);

assign sh_assign_3_fu_408_p3 = ((isNeg_1_fu_390_p3[0:0] === 1'b1) ? tmp_14_i_i_i1_cast_fu_404_p1 : sh_assign_2_fu_384_p2);

assign sh_assign_fu_232_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_cast3_fu_228_p1));

assign step_V_fu_334_p3 = ((p_Result_s_reg_567[0:0] === 1'b1) ? tmp_12_reg_593 : tmp_11_reg_588);

assign tmp_10_fu_311_p4 = {{tmp_17_i_i_i_fu_293_p2[47:24]}};

assign tmp_11_fu_321_p3 = ((isNeg_reg_577[0:0] === 1'b1) ? tmp_1_fu_307_p1 : tmp_10_fu_311_p4);

assign tmp_12_fu_328_p2 = (24'd0 - tmp_11_fu_321_p3);

assign tmp_13_fu_339_p1 = $signed(step_V_fu_334_p3);

assign tmp_13_i_i_i9_cast2_fu_425_p1 = tmp_13_i_i_i9_fu_416_p4;

assign tmp_13_i_i_i9_fu_416_p4 = {{{{1'd1}, {loc_V_3_reg_624}}}, {1'd0}};

assign tmp_13_i_i_i_cast4_fu_273_p1 = tmp_13_i_i_i_fu_264_p4;

assign tmp_13_i_i_i_fu_264_p4 = {{{{1'd1}, {loc_V_1_reg_572}}}, {1'd0}};

assign tmp_14_fu_198_p1 = $signed(val_V);

assign tmp_14_i_i_i1_cast_fu_404_p1 = $signed(tmp_14_i_i_i1_fu_398_p2);

assign tmp_14_i_i_i1_fu_398_p2 = (8'd127 - loc_V_2_fu_366_p4);

assign tmp_14_i_i_i_cast_fu_252_p1 = $signed(tmp_14_i_i_i_fu_246_p2);

assign tmp_14_i_i_i_fu_246_p2 = (8'd127 - loc_V_fu_214_p4);

assign tmp_15_i_i_i1_fu_435_p1 = $unsigned(sh_assign_3_cast_fu_429_p1);

assign tmp_15_i_i_i_fu_283_p1 = $unsigned(sh_assign_1_cast_fu_277_p1);

assign tmp_16_fu_459_p1 = tmp_21_fu_451_p3;

assign tmp_16_i_i_i1_fu_439_p2 = tmp_13_i_i_i9_fu_416_p4 >> sh_assign_3_cast_cas_fu_432_p1;

assign tmp_16_i_i_i_fu_287_p2 = tmp_13_i_i_i_fu_264_p4 >> sh_assign_1_cast_cas_fu_280_p1;

assign tmp_17_fu_463_p4 = {{tmp_17_i_i_i1_fu_445_p2[54:24]}};

assign tmp_17_i_i_i1_fu_445_p2 = tmp_13_i_i_i9_cast2_fu_425_p1 << tmp_15_i_i_i1_fu_435_p1;

assign tmp_17_i_i_i_fu_293_p2 = tmp_13_i_i_i_cast4_fu_273_p1 << tmp_15_i_i_i_fu_283_p1;

assign tmp_19_i_i_i1_fu_480_p1 = p_Val2_4_fu_473_p3;

assign tmp_1_fu_307_p1 = tmp_fu_299_p3;

assign tmp_21_fu_451_p3 = tmp_16_i_i_i1_fu_439_p2[32'd24];

assign tmp_22_i_i_i1_fu_484_p2 = (32'd0 - tmp_19_i_i_i1_fu_480_p1);

assign tmp_3_fu_496_p2 = (($signed(p_Val2_6_fu_490_p3) > $signed(32'd48000)) ? 1'b1 : 1'b0);

assign tmp_8_fu_502_p2 = ($signed(p_Val2_6_fu_490_p3) + $signed(32'd4294871296));

assign tmp_9_fu_509_p2 = (tmp_s_reg_603 + 24'd1);

assign tmp_fu_299_p3 = tmp_16_i_i_i_fu_287_p2[32'd24];

assign tmp_i_i_i_i1_cast1_fu_380_p1 = loc_V_2_fu_366_p4;

assign tmp_i_i_i_i_cast3_fu_228_p1 = loc_V_fu_214_p4;

assign tmp_s_fu_344_p2 = (step_V_fu_334_p3 + val_V);

always @ (posedge ap_clk) begin
    tmp_19_i_i_i1_reg_640[31] <= 1'b0;
end

endmodule //saw
