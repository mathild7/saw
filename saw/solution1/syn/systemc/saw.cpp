// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "saw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic saw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic saw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<42> saw::ap_ST_fsm_state1 = "1";
const sc_lv<42> saw::ap_ST_fsm_state2 = "10";
const sc_lv<42> saw::ap_ST_fsm_state3 = "100";
const sc_lv<42> saw::ap_ST_fsm_state4 = "1000";
const sc_lv<42> saw::ap_ST_fsm_state5 = "10000";
const sc_lv<42> saw::ap_ST_fsm_state6 = "100000";
const sc_lv<42> saw::ap_ST_fsm_state7 = "1000000";
const sc_lv<42> saw::ap_ST_fsm_state8 = "10000000";
const sc_lv<42> saw::ap_ST_fsm_state9 = "100000000";
const sc_lv<42> saw::ap_ST_fsm_state10 = "1000000000";
const sc_lv<42> saw::ap_ST_fsm_state11 = "10000000000";
const sc_lv<42> saw::ap_ST_fsm_state12 = "100000000000";
const sc_lv<42> saw::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<42> saw::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<42> saw::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<42> saw::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<42> saw::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<1> saw::ap_const_lv1_0 = "0";
const sc_lv<1> saw::ap_const_lv1_1 = "1";
const sc_lv<2> saw::ap_const_lv2_0 = "00";
const sc_lv<2> saw::ap_const_lv2_2 = "10";
const sc_lv<2> saw::ap_const_lv2_3 = "11";
const sc_lv<2> saw::ap_const_lv2_1 = "1";
const sc_lv<32> saw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<24> saw::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<32> saw::ap_const_lv32_1A = "11010";
const sc_lv<32> saw::ap_const_lv32_1B = "11011";
const int saw::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> saw::ap_const_lv32_6 = "110";
const sc_lv<32> saw::ap_const_lv32_1C = "11100";
const sc_lv<32> saw::ap_const_lv32_21 = "100001";
const sc_lv<32> saw::ap_const_lv32_26 = "100110";
const sc_lv<32> saw::ap_const_lv32_1 = "1";
const sc_lv<32> saw::ap_const_lv32_4 = "100";
const sc_lv<32> saw::ap_const_lv32_A = "1010";
const sc_lv<32> saw::ap_const_lv32_14 = "10100";
const sc_lv<32> saw::ap_const_lv32_15 = "10101";
const sc_lv<32> saw::ap_const_lv32_16 = "10110";
const sc_lv<32> saw::ap_const_lv32_17 = "10111";
const sc_lv<32> saw::ap_const_lv32_27 = "100111";
const sc_lv<32> saw::ap_const_lv32_28 = "101000";
const sc_lv<32> saw::ap_const_lv32_29 = "101001";
const sc_lv<32> saw::ap_const_lv32_1D = "11101";
const sc_lv<32> saw::ap_const_lv32_22 = "100010";
const sc_lv<32> saw::ap_const_lv32_4B800000 = "1001011100000000000000000000000";
const sc_lv<32> saw::ap_const_lv32_7 = "111";
const sc_lv<32> saw::ap_const_lv32_473B8000 = "1000111001110111000000000000000";
const sc_lv<32> saw::ap_const_lv32_4AFFFFFE = "1001010111111111111111111111110";
const sc_lv<32> saw::ap_const_lv32_5 = "101";
const sc_lv<32> saw::ap_const_lv32_B = "1011";
const sc_lv<32> saw::ap_const_lv32_1F = "11111";
const sc_lv<32> saw::ap_const_lv32_1E = "11110";
const sc_lv<9> saw::ap_const_lv9_181 = "110000001";
const sc_lv<32> saw::ap_const_lv32_8 = "1000";
const sc_lv<8> saw::ap_const_lv8_7F = "1111111";
const sc_lv<32> saw::ap_const_lv32_18 = "11000";
const sc_lv<32> saw::ap_const_lv32_2F = "101111";
const sc_lv<32> saw::ap_const_lv32_36 = "110110";
const sc_lv<32> saw::ap_const_lv32_BB80 = "1011101110000000";
const sc_lv<32> saw::ap_const_lv32_FFFE8900 = "11111111111111101000100100000000";
const sc_lv<24> saw::ap_const_lv24_1 = "1";
const sc_lv<32> saw::ap_const_lv32_19 = "11001";
const sc_lv<32> saw::ap_const_lv32_2 = "10";
const sc_lv<32> saw::ap_const_lv32_3 = "11";
const sc_lv<32> saw::ap_const_lv32_20 = "100000";
const sc_lv<32> saw::ap_const_lv32_23 = "100011";
const sc_lv<32> saw::ap_const_lv32_24 = "100100";
const sc_lv<32> saw::ap_const_lv32_25 = "100101";
const bool saw::ap_const_boolean_1 = true;

saw::saw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    saw_CTRL_BUS_s_axi_U = new saw_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("saw_CTRL_BUS_s_axi_U");
    saw_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    saw_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    saw_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    saw_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    saw_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    saw_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    saw_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    saw_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    saw_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    saw_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    saw_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    saw_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    saw_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    saw_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    saw_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    saw_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    saw_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    saw_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    saw_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    saw_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    saw_CTRL_BUS_s_axi_U->freq(freq);
    saw_CTRL_BUS_s_axi_U->vol(vol);
    saw_CTRL_BUS_s_axi_U->user_writing_V(user_writing_V);
    saw_faddfsub_32nsbkb_U1 = new saw_faddfsub_32nsbkb<1,5,32,32,32>("saw_faddfsub_32nsbkb_U1");
    saw_faddfsub_32nsbkb_U1->clk(ap_clk);
    saw_faddfsub_32nsbkb_U1->reset(ap_rst_n_inv);
    saw_faddfsub_32nsbkb_U1->din0(grp_fu_162_p0);
    saw_faddfsub_32nsbkb_U1->din1(grp_fu_162_p1);
    saw_faddfsub_32nsbkb_U1->opcode(grp_fu_162_opcode);
    saw_faddfsub_32nsbkb_U1->ce(ap_var_for_const0);
    saw_faddfsub_32nsbkb_U1->dout(grp_fu_162_p2);
    saw_fmul_32ns_32ncud_U2 = new saw_fmul_32ns_32ncud<1,4,32,32,32>("saw_fmul_32ns_32ncud_U2");
    saw_fmul_32ns_32ncud_U2->clk(ap_clk);
    saw_fmul_32ns_32ncud_U2->reset(ap_rst_n_inv);
    saw_fmul_32ns_32ncud_U2->din0(grp_fu_166_p0);
    saw_fmul_32ns_32ncud_U2->din1(grp_fu_166_p1);
    saw_fmul_32ns_32ncud_U2->ce(ap_var_for_const0);
    saw_fmul_32ns_32ncud_U2->dout(grp_fu_166_p2);
    saw_fdiv_32ns_32ndEe_U3 = new saw_fdiv_32ns_32ndEe<1,16,32,32,32>("saw_fdiv_32ns_32ndEe_U3");
    saw_fdiv_32ns_32ndEe_U3->clk(ap_clk);
    saw_fdiv_32ns_32ndEe_U3->reset(ap_rst_n_inv);
    saw_fdiv_32ns_32ndEe_U3->din0(grp_fu_172_p0);
    saw_fdiv_32ns_32ndEe_U3->din1(grp_fu_172_p1);
    saw_fdiv_32ns_32ndEe_U3->ce(grp_fu_172_ce);
    saw_fdiv_32ns_32ndEe_U3->dout(grp_fu_172_p2);
    saw_sitofp_32s_32_6_U4 = new saw_sitofp_32s_32_6<1,6,32,32>("saw_sitofp_32s_32_6_U4");
    saw_sitofp_32s_32_6_U4->clk(ap_clk);
    saw_sitofp_32s_32_6_U4->reset(ap_rst_n_inv);
    saw_sitofp_32s_32_6_U4->din0(grp_fu_179_p0);
    saw_sitofp_32s_32_6_U4->ce(grp_fu_179_ce);
    saw_sitofp_32s_32_6_U4->dout(grp_fu_179_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_787);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( user_writing_V_read_reg_527 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_err_new_phi_fu_153_p6);
    sensitive << ( user_writing_V_read_reg_527 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( tmp_3_fu_496_p2 );
    sensitive << ( tmp_8_fu_502_p2 );
    sensitive << ( err_new_reg_149 );
    sensitive << ( p_Val2_6_fu_490_p3 );

    SC_METHOD(thread_freq_0_ack_out);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_grp_fu_162_opcode);
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_grp_fu_162_p0);
    sensitive << ( reg_182 );
    sensitive << ( fstep_reg_561 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_grp_fu_162_p1);
    sensitive << ( reg_182 );
    sensitive << ( reg_189 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_grp_fu_166_p0);
    sensitive << ( freq_0_data_reg );
    sensitive << ( reg_182 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_fu_166_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( vol_read_reg_531 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_fu_172_ce);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_grp_fu_172_p0);
    sensitive << ( tmp_2_reg_551 );
    sensitive << ( tmp_7_reg_556 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_grp_fu_172_p1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_grp_fu_179_ce);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_grp_fu_179_p0);
    sensitive << ( err );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_14_fu_198_p1 );
    sensitive << ( tmp_13_fu_339_p1 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_grp_read_fu_96_p2);
    sensitive << ( user_writing_V_0_data_reg );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_isNeg_1_fu_390_p3);
    sensitive << ( sh_assign_2_fu_384_p2 );

    SC_METHOD(thread_isNeg_fu_238_p3);
    sensitive << ( sh_assign_fu_232_p2 );

    SC_METHOD(thread_loc_V_1_fu_224_p1);
    sensitive << ( p_Val2_s_fu_203_p1 );

    SC_METHOD(thread_loc_V_2_fu_366_p4);
    sensitive << ( p_Val2_2_fu_354_p1 );

    SC_METHOD(thread_loc_V_3_fu_376_p1);
    sensitive << ( p_Val2_2_fu_354_p1 );

    SC_METHOD(thread_loc_V_fu_214_p4);
    sensitive << ( p_Val2_s_fu_203_p1 );

    SC_METHOD(thread_out_V_1_ack_in);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_1_ack_out);
    sensitive << ( out_V_TREADY );

    SC_METHOD(thread_out_V_1_data_out);
    sensitive << ( out_V_1_payload_A );
    sensitive << ( out_V_1_payload_B );
    sensitive << ( out_V_1_sel );

    SC_METHOD(thread_out_V_1_load_A);
    sensitive << ( out_V_1_sel_wr );
    sensitive << ( out_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_1_load_B);
    sensitive << ( out_V_1_sel_wr );
    sensitive << ( out_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_1_sel);
    sensitive << ( out_V_1_sel_rd );

    SC_METHOD(thread_out_V_1_state_cmp_full);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_1_vld_in);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_out_V_1_vld_out);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_TDATA);
    sensitive << ( out_V_1_data_out );

    SC_METHOD(thread_out_V_TDATA_blk_n);
    sensitive << ( out_V_1_state );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_out_V_TVALID);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_p_Val2_2_fu_354_p1);
    sensitive << ( reg_189 );

    SC_METHOD(thread_p_Val2_4_fu_473_p3);
    sensitive << ( isNeg_1_reg_629 );
    sensitive << ( tmp_16_fu_459_p1 );
    sensitive << ( tmp_17_fu_463_p4 );

    SC_METHOD(thread_p_Val2_6_fu_490_p3);
    sensitive << ( p_Result_1_reg_619 );
    sensitive << ( tmp_19_i_i_i1_reg_640 );
    sensitive << ( tmp_22_i_i_i1_reg_645 );

    SC_METHOD(thread_p_Val2_s_fu_203_p1);
    sensitive << ( fstep_reg_561 );

    SC_METHOD(thread_sh_assign_1_cast_cas_fu_280_p1);
    sensitive << ( sh_assign_1_reg_582 );

    SC_METHOD(thread_sh_assign_1_cast_fu_277_p1);
    sensitive << ( sh_assign_1_reg_582 );

    SC_METHOD(thread_sh_assign_1_fu_256_p3);
    sensitive << ( isNeg_fu_238_p3 );
    sensitive << ( sh_assign_fu_232_p2 );
    sensitive << ( tmp_14_i_i_i_cast_fu_252_p1 );

    SC_METHOD(thread_sh_assign_2_fu_384_p2);
    sensitive << ( tmp_i_i_i_i1_cast1_fu_380_p1 );

    SC_METHOD(thread_sh_assign_3_cast_cas_fu_432_p1);
    sensitive << ( sh_assign_3_reg_634 );

    SC_METHOD(thread_sh_assign_3_cast_fu_429_p1);
    sensitive << ( sh_assign_3_reg_634 );

    SC_METHOD(thread_sh_assign_3_fu_408_p3);
    sensitive << ( isNeg_1_fu_390_p3 );
    sensitive << ( sh_assign_2_fu_384_p2 );
    sensitive << ( tmp_14_i_i_i1_cast_fu_404_p1 );

    SC_METHOD(thread_sh_assign_fu_232_p2);
    sensitive << ( tmp_i_i_i_i_cast3_fu_228_p1 );

    SC_METHOD(thread_step_V_fu_334_p3);
    sensitive << ( p_Result_s_reg_567 );
    sensitive << ( tmp_11_reg_588 );
    sensitive << ( tmp_12_reg_593 );

    SC_METHOD(thread_tmp_10_fu_311_p4);
    sensitive << ( tmp_17_i_i_i_fu_293_p2 );

    SC_METHOD(thread_tmp_11_fu_321_p3);
    sensitive << ( isNeg_reg_577 );
    sensitive << ( tmp_1_fu_307_p1 );
    sensitive << ( tmp_10_fu_311_p4 );

    SC_METHOD(thread_tmp_12_fu_328_p2);
    sensitive << ( tmp_11_fu_321_p3 );

    SC_METHOD(thread_tmp_13_fu_339_p1);
    sensitive << ( step_V_fu_334_p3 );

    SC_METHOD(thread_tmp_13_i_i_i9_cast2_fu_425_p1);
    sensitive << ( tmp_13_i_i_i9_fu_416_p4 );

    SC_METHOD(thread_tmp_13_i_i_i9_fu_416_p4);
    sensitive << ( loc_V_3_reg_624 );

    SC_METHOD(thread_tmp_13_i_i_i_cast4_fu_273_p1);
    sensitive << ( tmp_13_i_i_i_fu_264_p4 );

    SC_METHOD(thread_tmp_13_i_i_i_fu_264_p4);
    sensitive << ( loc_V_1_reg_572 );

    SC_METHOD(thread_tmp_14_fu_198_p1);
    sensitive << ( val_V );

    SC_METHOD(thread_tmp_14_i_i_i1_cast_fu_404_p1);
    sensitive << ( tmp_14_i_i_i1_fu_398_p2 );

    SC_METHOD(thread_tmp_14_i_i_i1_fu_398_p2);
    sensitive << ( loc_V_2_fu_366_p4 );

    SC_METHOD(thread_tmp_14_i_i_i_cast_fu_252_p1);
    sensitive << ( tmp_14_i_i_i_fu_246_p2 );

    SC_METHOD(thread_tmp_14_i_i_i_fu_246_p2);
    sensitive << ( loc_V_fu_214_p4 );

    SC_METHOD(thread_tmp_15_i_i_i1_fu_435_p1);
    sensitive << ( sh_assign_3_cast_fu_429_p1 );

    SC_METHOD(thread_tmp_15_i_i_i_fu_283_p1);
    sensitive << ( sh_assign_1_cast_fu_277_p1 );

    SC_METHOD(thread_tmp_16_fu_459_p1);
    sensitive << ( tmp_21_fu_451_p3 );

    SC_METHOD(thread_tmp_16_i_i_i1_fu_439_p2);
    sensitive << ( tmp_13_i_i_i9_fu_416_p4 );
    sensitive << ( sh_assign_3_cast_cas_fu_432_p1 );

    SC_METHOD(thread_tmp_16_i_i_i_fu_287_p2);
    sensitive << ( tmp_13_i_i_i_fu_264_p4 );
    sensitive << ( sh_assign_1_cast_cas_fu_280_p1 );

    SC_METHOD(thread_tmp_17_fu_463_p4);
    sensitive << ( tmp_17_i_i_i1_fu_445_p2 );

    SC_METHOD(thread_tmp_17_i_i_i1_fu_445_p2);
    sensitive << ( tmp_13_i_i_i9_cast2_fu_425_p1 );
    sensitive << ( tmp_15_i_i_i1_fu_435_p1 );

    SC_METHOD(thread_tmp_17_i_i_i_fu_293_p2);
    sensitive << ( tmp_13_i_i_i_cast4_fu_273_p1 );
    sensitive << ( tmp_15_i_i_i_fu_283_p1 );

    SC_METHOD(thread_tmp_19_i_i_i1_fu_480_p1);
    sensitive << ( p_Val2_4_fu_473_p3 );

    SC_METHOD(thread_tmp_1_fu_307_p1);
    sensitive << ( tmp_fu_299_p3 );

    SC_METHOD(thread_tmp_21_fu_451_p3);
    sensitive << ( tmp_16_i_i_i1_fu_439_p2 );

    SC_METHOD(thread_tmp_22_i_i_i1_fu_484_p2);
    sensitive << ( tmp_19_i_i_i1_fu_480_p1 );

    SC_METHOD(thread_tmp_3_fu_496_p2);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( user_writing_V_read_reg_527 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( p_Val2_6_fu_490_p3 );

    SC_METHOD(thread_tmp_8_fu_502_p2);
    sensitive << ( p_Val2_6_fu_490_p3 );

    SC_METHOD(thread_tmp_9_fu_509_p2);
    sensitive << ( tmp_s_reg_603 );

    SC_METHOD(thread_tmp_fu_299_p3);
    sensitive << ( tmp_16_i_i_i_fu_287_p2 );

    SC_METHOD(thread_tmp_i_i_i_i1_cast1_fu_380_p1);
    sensitive << ( loc_V_2_fu_366_p4 );

    SC_METHOD(thread_tmp_i_i_i_i_cast3_fu_228_p1);
    sensitive << ( loc_V_fu_214_p4 );

    SC_METHOD(thread_tmp_s_fu_344_p2);
    sensitive << ( val_V );
    sensitive << ( step_V_fu_334_p3 );

    SC_METHOD(thread_user_writing_V_0_ack_out);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_val_V_flag_phi_fu_125_p6);
    sensitive << ( user_writing_V_read_reg_527 );
    sensitive << ( val_V_flag_reg_121 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( tmp_3_fu_496_p2 );

    SC_METHOD(thread_val_V_new_phi_fu_140_p6);
    sensitive << ( user_writing_V_read_reg_527 );
    sensitive << ( tmp_s_reg_603 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( tmp_3_fu_496_p2 );
    sensitive << ( tmp_9_fu_509_p2 );
    sensitive << ( val_V_new_reg_136 );

    SC_METHOD(thread_vol_0_ack_out);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( grp_read_fu_96_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    out_V_1_sel_rd = SC_LOGIC_0;
    out_V_1_sel_wr = SC_LOGIC_0;
    out_V_1_state = "00";
    freq_0_data_reg = "00000000000000000000000000000000";
    freq_0_vld_reg = SC_LOGIC_0;
    vol_0_data_reg = "00000000000000000000000000000000";
    vol_0_vld_reg = SC_LOGIC_0;
    user_writing_V_0_data_reg = "0";
    user_writing_V_0_vld_reg = SC_LOGIC_0;
    val_V = "000000000000000000000000";
    err = "11111111111111110100010010000000";
    ap_CS_fsm = "000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "saw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, out_V_TDATA, "(port)out_V_TDATA");
    sc_trace(mVcdFile, out_V_TVALID, "(port)out_V_TVALID");
    sc_trace(mVcdFile, out_V_TREADY, "(port)out_V_TREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, out_V_1_data_out, "out_V_1_data_out");
    sc_trace(mVcdFile, out_V_1_vld_in, "out_V_1_vld_in");
    sc_trace(mVcdFile, out_V_1_vld_out, "out_V_1_vld_out");
    sc_trace(mVcdFile, out_V_1_ack_in, "out_V_1_ack_in");
    sc_trace(mVcdFile, out_V_1_ack_out, "out_V_1_ack_out");
    sc_trace(mVcdFile, out_V_1_payload_A, "out_V_1_payload_A");
    sc_trace(mVcdFile, out_V_1_payload_B, "out_V_1_payload_B");
    sc_trace(mVcdFile, out_V_1_sel_rd, "out_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_1_sel_wr, "out_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_1_sel, "out_V_1_sel");
    sc_trace(mVcdFile, out_V_1_load_A, "out_V_1_load_A");
    sc_trace(mVcdFile, out_V_1_load_B, "out_V_1_load_B");
    sc_trace(mVcdFile, out_V_1_state, "out_V_1_state");
    sc_trace(mVcdFile, out_V_1_state_cmp_full, "out_V_1_state_cmp_full");
    sc_trace(mVcdFile, freq, "freq");
    sc_trace(mVcdFile, freq_0_data_reg, "freq_0_data_reg");
    sc_trace(mVcdFile, freq_0_vld_reg, "freq_0_vld_reg");
    sc_trace(mVcdFile, freq_0_ack_out, "freq_0_ack_out");
    sc_trace(mVcdFile, vol, "vol");
    sc_trace(mVcdFile, vol_0_data_reg, "vol_0_data_reg");
    sc_trace(mVcdFile, vol_0_vld_reg, "vol_0_vld_reg");
    sc_trace(mVcdFile, vol_0_ack_out, "vol_0_ack_out");
    sc_trace(mVcdFile, user_writing_V, "user_writing_V");
    sc_trace(mVcdFile, user_writing_V_0_data_reg, "user_writing_V_0_data_reg");
    sc_trace(mVcdFile, user_writing_V_0_vld_reg, "user_writing_V_0_vld_reg");
    sc_trace(mVcdFile, user_writing_V_0_ack_out, "user_writing_V_0_ack_out");
    sc_trace(mVcdFile, val_V, "val_V");
    sc_trace(mVcdFile, err, "err");
    sc_trace(mVcdFile, out_V_TDATA_blk_n, "out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, grp_fu_179_p1, "grp_fu_179_p1");
    sc_trace(mVcdFile, reg_182, "reg_182");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, grp_fu_162_p2, "grp_fu_162_p2");
    sc_trace(mVcdFile, reg_189, "reg_189");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, grp_read_fu_96_p2, "grp_read_fu_96_p2");
    sc_trace(mVcdFile, user_writing_V_read_reg_527, "user_writing_V_read_reg_527");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, vol_read_reg_531, "vol_read_reg_531");
    sc_trace(mVcdFile, tmp_14_fu_198_p1, "tmp_14_fu_198_p1");
    sc_trace(mVcdFile, grp_fu_166_p2, "grp_fu_166_p2");
    sc_trace(mVcdFile, tmp_2_reg_551, "tmp_2_reg_551");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_7_reg_556, "tmp_7_reg_556");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_172_p2, "grp_fu_172_p2");
    sc_trace(mVcdFile, fstep_reg_561, "fstep_reg_561");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, p_Result_s_reg_567, "p_Result_s_reg_567");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, loc_V_1_fu_224_p1, "loc_V_1_fu_224_p1");
    sc_trace(mVcdFile, loc_V_1_reg_572, "loc_V_1_reg_572");
    sc_trace(mVcdFile, isNeg_fu_238_p3, "isNeg_fu_238_p3");
    sc_trace(mVcdFile, isNeg_reg_577, "isNeg_reg_577");
    sc_trace(mVcdFile, sh_assign_1_fu_256_p3, "sh_assign_1_fu_256_p3");
    sc_trace(mVcdFile, sh_assign_1_reg_582, "sh_assign_1_reg_582");
    sc_trace(mVcdFile, tmp_11_fu_321_p3, "tmp_11_fu_321_p3");
    sc_trace(mVcdFile, tmp_11_reg_588, "tmp_11_reg_588");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, tmp_12_fu_328_p2, "tmp_12_fu_328_p2");
    sc_trace(mVcdFile, tmp_12_reg_593, "tmp_12_reg_593");
    sc_trace(mVcdFile, tmp_13_fu_339_p1, "tmp_13_fu_339_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, tmp_s_fu_344_p2, "tmp_s_fu_344_p2");
    sc_trace(mVcdFile, tmp_s_reg_603, "tmp_s_reg_603");
    sc_trace(mVcdFile, p_Result_1_reg_619, "p_Result_1_reg_619");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, loc_V_3_fu_376_p1, "loc_V_3_fu_376_p1");
    sc_trace(mVcdFile, loc_V_3_reg_624, "loc_V_3_reg_624");
    sc_trace(mVcdFile, isNeg_1_fu_390_p3, "isNeg_1_fu_390_p3");
    sc_trace(mVcdFile, isNeg_1_reg_629, "isNeg_1_reg_629");
    sc_trace(mVcdFile, sh_assign_3_fu_408_p3, "sh_assign_3_fu_408_p3");
    sc_trace(mVcdFile, sh_assign_3_reg_634, "sh_assign_3_reg_634");
    sc_trace(mVcdFile, tmp_19_i_i_i1_fu_480_p1, "tmp_19_i_i_i1_fu_480_p1");
    sc_trace(mVcdFile, tmp_19_i_i_i1_reg_640, "tmp_19_i_i_i1_reg_640");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, tmp_22_i_i_i1_fu_484_p2, "tmp_22_i_i_i1_fu_484_p2");
    sc_trace(mVcdFile, tmp_22_i_i_i1_reg_645, "tmp_22_i_i_i1_reg_645");
    sc_trace(mVcdFile, val_V_flag_phi_fu_125_p6, "val_V_flag_phi_fu_125_p6");
    sc_trace(mVcdFile, val_V_flag_reg_121, "val_V_flag_reg_121");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, tmp_3_fu_496_p2, "tmp_3_fu_496_p2");
    sc_trace(mVcdFile, tmp_9_fu_509_p2, "tmp_9_fu_509_p2");
    sc_trace(mVcdFile, val_V_new_phi_fu_140_p6, "val_V_new_phi_fu_140_p6");
    sc_trace(mVcdFile, val_V_new_reg_136, "val_V_new_reg_136");
    sc_trace(mVcdFile, tmp_8_fu_502_p2, "tmp_8_fu_502_p2");
    sc_trace(mVcdFile, err_new_phi_fu_153_p6, "err_new_phi_fu_153_p6");
    sc_trace(mVcdFile, err_new_reg_149, "err_new_reg_149");
    sc_trace(mVcdFile, p_Val2_6_fu_490_p3, "p_Val2_6_fu_490_p3");
    sc_trace(mVcdFile, grp_fu_162_p0, "grp_fu_162_p0");
    sc_trace(mVcdFile, grp_fu_162_p1, "grp_fu_162_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, grp_fu_166_p0, "grp_fu_166_p0");
    sc_trace(mVcdFile, grp_fu_166_p1, "grp_fu_166_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_172_p0, "grp_fu_172_p0");
    sc_trace(mVcdFile, grp_fu_172_p1, "grp_fu_172_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_179_p0, "grp_fu_179_p0");
    sc_trace(mVcdFile, p_Val2_s_fu_203_p1, "p_Val2_s_fu_203_p1");
    sc_trace(mVcdFile, loc_V_fu_214_p4, "loc_V_fu_214_p4");
    sc_trace(mVcdFile, tmp_i_i_i_i_cast3_fu_228_p1, "tmp_i_i_i_i_cast3_fu_228_p1");
    sc_trace(mVcdFile, sh_assign_fu_232_p2, "sh_assign_fu_232_p2");
    sc_trace(mVcdFile, tmp_14_i_i_i_fu_246_p2, "tmp_14_i_i_i_fu_246_p2");
    sc_trace(mVcdFile, tmp_14_i_i_i_cast_fu_252_p1, "tmp_14_i_i_i_cast_fu_252_p1");
    sc_trace(mVcdFile, tmp_13_i_i_i_fu_264_p4, "tmp_13_i_i_i_fu_264_p4");
    sc_trace(mVcdFile, sh_assign_1_cast_fu_277_p1, "sh_assign_1_cast_fu_277_p1");
    sc_trace(mVcdFile, sh_assign_1_cast_cas_fu_280_p1, "sh_assign_1_cast_cas_fu_280_p1");
    sc_trace(mVcdFile, tmp_13_i_i_i_cast4_fu_273_p1, "tmp_13_i_i_i_cast4_fu_273_p1");
    sc_trace(mVcdFile, tmp_15_i_i_i_fu_283_p1, "tmp_15_i_i_i_fu_283_p1");
    sc_trace(mVcdFile, tmp_16_i_i_i_fu_287_p2, "tmp_16_i_i_i_fu_287_p2");
    sc_trace(mVcdFile, tmp_fu_299_p3, "tmp_fu_299_p3");
    sc_trace(mVcdFile, tmp_17_i_i_i_fu_293_p2, "tmp_17_i_i_i_fu_293_p2");
    sc_trace(mVcdFile, tmp_1_fu_307_p1, "tmp_1_fu_307_p1");
    sc_trace(mVcdFile, tmp_10_fu_311_p4, "tmp_10_fu_311_p4");
    sc_trace(mVcdFile, step_V_fu_334_p3, "step_V_fu_334_p3");
    sc_trace(mVcdFile, p_Val2_2_fu_354_p1, "p_Val2_2_fu_354_p1");
    sc_trace(mVcdFile, loc_V_2_fu_366_p4, "loc_V_2_fu_366_p4");
    sc_trace(mVcdFile, tmp_i_i_i_i1_cast1_fu_380_p1, "tmp_i_i_i_i1_cast1_fu_380_p1");
    sc_trace(mVcdFile, sh_assign_2_fu_384_p2, "sh_assign_2_fu_384_p2");
    sc_trace(mVcdFile, tmp_14_i_i_i1_fu_398_p2, "tmp_14_i_i_i1_fu_398_p2");
    sc_trace(mVcdFile, tmp_14_i_i_i1_cast_fu_404_p1, "tmp_14_i_i_i1_cast_fu_404_p1");
    sc_trace(mVcdFile, tmp_13_i_i_i9_fu_416_p4, "tmp_13_i_i_i9_fu_416_p4");
    sc_trace(mVcdFile, sh_assign_3_cast_fu_429_p1, "sh_assign_3_cast_fu_429_p1");
    sc_trace(mVcdFile, sh_assign_3_cast_cas_fu_432_p1, "sh_assign_3_cast_cas_fu_432_p1");
    sc_trace(mVcdFile, tmp_13_i_i_i9_cast2_fu_425_p1, "tmp_13_i_i_i9_cast2_fu_425_p1");
    sc_trace(mVcdFile, tmp_15_i_i_i1_fu_435_p1, "tmp_15_i_i_i1_fu_435_p1");
    sc_trace(mVcdFile, tmp_16_i_i_i1_fu_439_p2, "tmp_16_i_i_i1_fu_439_p2");
    sc_trace(mVcdFile, tmp_21_fu_451_p3, "tmp_21_fu_451_p3");
    sc_trace(mVcdFile, tmp_17_i_i_i1_fu_445_p2, "tmp_17_i_i_i1_fu_445_p2");
    sc_trace(mVcdFile, tmp_16_fu_459_p1, "tmp_16_fu_459_p1");
    sc_trace(mVcdFile, tmp_17_fu_463_p4, "tmp_17_fu_463_p4");
    sc_trace(mVcdFile, p_Val2_4_fu_473_p3, "p_Val2_4_fu_473_p3");
    sc_trace(mVcdFile, grp_fu_162_opcode, "grp_fu_162_opcode");
    sc_trace(mVcdFile, grp_fu_172_ce, "grp_fu_172_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, grp_fu_179_ce, "grp_fu_179_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_787, "ap_condition_787");
#endif

    }
    mHdltvinHandle.open("saw.hdltvin.dat");
    mHdltvoutHandle.open("saw.hdltvout.dat");
}

saw::~saw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete saw_CTRL_BUS_s_axi_U;
    delete saw_faddfsub_32nsbkb_U1;
    delete saw_fmul_32ns_32ncud_U2;
    delete saw_fdiv_32ns_32ndEe_U3;
    delete saw_sitofp_32s_32_6_U4;
}

void saw::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void saw::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_condition_787.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_496_p2.read())) {
            err_new_reg_149 = p_Val2_6_fu_490_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_496_p2.read())) {
            err_new_reg_149 = tmp_8_fu_502_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_out.read()))) {
            out_V_1_sel_rd =  (sc_logic) (~out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_in.read()))) {
            out_V_1_sel_wr =  (sc_logic) (~out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_2)))) {
            out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_1)))) {
            out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()))))) {
            out_V_1_state = ap_const_lv2_3;
        } else {
            out_V_1_state = ap_const_lv2_2;
        }
    }
    if (((esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, user_writing_V_read_reg_527.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_496_p2.read())) || 
         (esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, user_writing_V_read_reg_527.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_496_p2.read())))) {
        val_V_flag_reg_121 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, grp_read_fu_96_p2.read()))) {
        val_V_flag_reg_121 = ap_const_lv1_0;
    }
    if (esl_seteq<1,1,1>(ap_condition_787.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_496_p2.read())) {
            val_V_new_reg_136 = tmp_s_reg_603.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_496_p2.read())) {
            val_V_new_reg_136 = tmp_9_fu_509_p2.read();
        }
    }
    if ((esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, val_V_flag_phi_fu_125_p6.read()))) {
        err = err_new_phi_fu_153_p6.read();
        val_V = val_V_new_phi_fu_140_p6.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, freq_0_vld_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, freq_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, freq_0_ack_out.read())))) {
        freq_0_data_reg = freq.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        fstep_reg_561 = grp_fu_172_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        isNeg_1_reg_629 = sh_assign_2_fu_384_p2.read().range(8, 8);
        loc_V_3_reg_624 = loc_V_3_fu_376_p1.read();
        p_Result_1_reg_619 = p_Val2_2_fu_354_p1.read().range(31, 31);
        sh_assign_3_reg_634 = sh_assign_3_fu_408_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        isNeg_reg_577 = sh_assign_fu_232_p2.read().range(8, 8);
        loc_V_1_reg_572 = loc_V_1_fu_224_p1.read();
        p_Result_s_reg_567 = p_Val2_s_fu_203_p1.read().range(31, 31);
        sh_assign_1_reg_582 = sh_assign_1_fu_256_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_load_A.read())) {
        out_V_1_payload_A = grp_fu_172_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_load_B.read())) {
        out_V_1_payload_B = grp_fu_172_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        reg_182 = grp_fu_179_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        reg_189 = grp_fu_162_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        tmp_11_reg_588 = tmp_11_fu_321_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, p_Result_s_reg_567.read()))) {
        tmp_12_reg_593 = tmp_12_fu_328_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        tmp_19_i_i_i1_reg_640 = tmp_19_i_i_i1_fu_480_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, p_Result_1_reg_619.read()))) {
        tmp_22_i_i_i1_reg_645 = tmp_22_i_i_i1_fu_484_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_2_reg_551 = grp_fu_166_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_7_reg_556 = grp_fu_166_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        tmp_s_reg_603 = tmp_s_fu_344_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, user_writing_V_0_vld_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, user_writing_V_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, user_writing_V_0_ack_out.read())))) {
        user_writing_V_0_data_reg = user_writing_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        user_writing_V_read_reg_527 = user_writing_V_0_data_reg.read();
        vol_read_reg_531 = vol_0_data_reg.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, vol_0_vld_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, vol_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, vol_0_ack_out.read())))) {
        vol_0_data_reg = vol.read();
    }
}

void saw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void saw::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void saw::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void saw::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void saw::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void saw::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void saw::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void saw::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void saw::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void saw::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void saw::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void saw::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void saw::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void saw::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void saw::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void saw::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void saw::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void saw::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void saw::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void saw::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void saw::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void saw::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void saw::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void saw::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void saw::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void saw::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void saw::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void saw::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void saw::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void saw::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void saw::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void saw::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void saw::thread_ap_condition_787() {
    ap_condition_787 = (esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, user_writing_V_read_reg_527.read()));
}

void saw::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void saw::thread_err_new_phi_fu_153_p6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, user_writing_V_read_reg_527.read()))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_496_p2.read())) {
            err_new_phi_fu_153_p6 = p_Val2_6_fu_490_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_496_p2.read())) {
            err_new_phi_fu_153_p6 = tmp_8_fu_502_p2.read();
        } else {
            err_new_phi_fu_153_p6 = err_new_reg_149.read();
        }
    } else {
        err_new_phi_fu_153_p6 = err_new_reg_149.read();
    }
}

void saw::thread_freq_0_ack_out() {
    if ((esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        freq_0_ack_out = ap_const_logic_1;
    } else {
        freq_0_ack_out = ap_const_logic_0;
    }
}

void saw::thread_grp_fu_162_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_fu_162_opcode = ap_const_lv2_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        grp_fu_162_opcode = ap_const_lv2_0;
    } else {
        grp_fu_162_opcode = "XX";
    }
}

void saw::thread_grp_fu_162_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        grp_fu_162_p0 = reg_182.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_fu_162_p0 = fstep_reg_561.read();
    } else {
        grp_fu_162_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void saw::thread_grp_fu_162_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        grp_fu_162_p1 = reg_189.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_fu_162_p1 = reg_182.read();
    } else {
        grp_fu_162_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void saw::thread_grp_fu_166_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_166_p0 = reg_182.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_166_p0 = freq_0_data_reg.read();
    } else {
        grp_fu_166_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void saw::thread_grp_fu_166_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_166_p1 = vol_read_reg_531.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_166_p1 = ap_const_lv32_4B800000;
    } else {
        grp_fu_166_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void saw::thread_grp_fu_172_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_in.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        grp_fu_172_ce = ap_const_logic_0;
    } else {
        grp_fu_172_ce = ap_const_logic_1;
    }
}

void saw::thread_grp_fu_172_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_172_p0 = tmp_7_reg_556.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_172_p0 = tmp_2_reg_551.read();
    } else {
        grp_fu_172_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void saw::thread_grp_fu_172_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_172_p1 = ap_const_lv32_4AFFFFFE;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_172_p1 = ap_const_lv32_473B8000;
    } else {
        grp_fu_172_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void saw::thread_grp_fu_179_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        grp_fu_179_ce = ap_const_logic_1;
    } else {
        grp_fu_179_ce = ap_const_logic_0;
    }
}

void saw::thread_grp_fu_179_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        grp_fu_179_p0 = err.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        grp_fu_179_p0 = tmp_13_fu_339_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_179_p0 = tmp_14_fu_198_p1.read();
    } else {
        grp_fu_179_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void saw::thread_grp_read_fu_96_p2() {
    grp_read_fu_96_p2 = user_writing_V_0_data_reg.read();
}

void saw::thread_isNeg_1_fu_390_p3() {
    isNeg_1_fu_390_p3 = sh_assign_2_fu_384_p2.read().range(8, 8);
}

void saw::thread_isNeg_fu_238_p3() {
    isNeg_fu_238_p3 = sh_assign_fu_232_p2.read().range(8, 8);
}

void saw::thread_loc_V_1_fu_224_p1() {
    loc_V_1_fu_224_p1 = p_Val2_s_fu_203_p1.read().range(23-1, 0);
}

void saw::thread_loc_V_2_fu_366_p4() {
    loc_V_2_fu_366_p4 = p_Val2_2_fu_354_p1.read().range(30, 23);
}

void saw::thread_loc_V_3_fu_376_p1() {
    loc_V_3_fu_376_p1 = p_Val2_2_fu_354_p1.read().range(23-1, 0);
}

void saw::thread_loc_V_fu_214_p4() {
    loc_V_fu_214_p4 = p_Val2_s_fu_203_p1.read().range(30, 23);
}

void saw::thread_out_V_1_ack_in() {
    out_V_1_ack_in = out_V_1_state.read()[1];
}

void saw::thread_out_V_1_ack_out() {
    out_V_1_ack_out = out_V_TREADY.read();
}

void saw::thread_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_sel.read())) {
        out_V_1_data_out = out_V_1_payload_B.read();
    } else {
        out_V_1_data_out = out_V_1_payload_A.read();
    }
}

void saw::thread_out_V_1_load_A() {
    out_V_1_load_A = (out_V_1_state_cmp_full.read() & ~out_V_1_sel_wr.read());
}

void saw::thread_out_V_1_load_B() {
    out_V_1_load_B = (out_V_1_sel_wr.read() & out_V_1_state_cmp_full.read());
}

void saw::thread_out_V_1_sel() {
    out_V_1_sel = out_V_1_sel_rd.read();
}

void saw::thread_out_V_1_state_cmp_full() {
    out_V_1_state_cmp_full =  (sc_logic) ((!out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_1_state.read() != ap_const_lv2_1))[0];
}

void saw::thread_out_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
        out_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_1_vld_in = ap_const_logic_0;
    }
}

void saw::thread_out_V_1_vld_out() {
    out_V_1_vld_out = out_V_1_state.read()[0];
}

void saw::thread_out_V_TDATA() {
    out_V_TDATA = out_V_1_data_out.read();
}

void saw::thread_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        out_V_TDATA_blk_n = out_V_1_state.read()[1];
    } else {
        out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void saw::thread_out_V_TVALID() {
    out_V_TVALID = out_V_1_state.read()[0];
}

void saw::thread_p_Val2_2_fu_354_p1() {
    p_Val2_2_fu_354_p1 = reg_189.read();
}

void saw::thread_p_Val2_4_fu_473_p3() {
    p_Val2_4_fu_473_p3 = (!isNeg_1_reg_629.read()[0].is_01())? sc_lv<31>(): ((isNeg_1_reg_629.read()[0].to_bool())? tmp_16_fu_459_p1.read(): tmp_17_fu_463_p4.read());
}

void saw::thread_p_Val2_6_fu_490_p3() {
    p_Val2_6_fu_490_p3 = (!p_Result_1_reg_619.read()[0].is_01())? sc_lv<32>(): ((p_Result_1_reg_619.read()[0].to_bool())? tmp_22_i_i_i1_reg_645.read(): tmp_19_i_i_i1_reg_640.read());
}

void saw::thread_p_Val2_s_fu_203_p1() {
    p_Val2_s_fu_203_p1 = fstep_reg_561.read();
}

void saw::thread_sh_assign_1_cast_cas_fu_280_p1() {
    sh_assign_1_cast_cas_fu_280_p1 = esl_sext<25,9>(sh_assign_1_reg_582.read());
}

void saw::thread_sh_assign_1_cast_fu_277_p1() {
    sh_assign_1_cast_fu_277_p1 = esl_sext<32,9>(sh_assign_1_reg_582.read());
}

void saw::thread_sh_assign_1_fu_256_p3() {
    sh_assign_1_fu_256_p3 = (!isNeg_fu_238_p3.read()[0].is_01())? sc_lv<9>(): ((isNeg_fu_238_p3.read()[0].to_bool())? tmp_14_i_i_i_cast_fu_252_p1.read(): sh_assign_fu_232_p2.read());
}

void saw::thread_sh_assign_2_fu_384_p2() {
    sh_assign_2_fu_384_p2 = (!ap_const_lv9_181.is_01() || !tmp_i_i_i_i1_cast1_fu_380_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_181) + sc_biguint<9>(tmp_i_i_i_i1_cast1_fu_380_p1.read()));
}

void saw::thread_sh_assign_3_cast_cas_fu_432_p1() {
    sh_assign_3_cast_cas_fu_432_p1 = esl_sext<25,9>(sh_assign_3_reg_634.read());
}

void saw::thread_sh_assign_3_cast_fu_429_p1() {
    sh_assign_3_cast_fu_429_p1 = esl_sext<32,9>(sh_assign_3_reg_634.read());
}

void saw::thread_sh_assign_3_fu_408_p3() {
    sh_assign_3_fu_408_p3 = (!isNeg_1_fu_390_p3.read()[0].is_01())? sc_lv<9>(): ((isNeg_1_fu_390_p3.read()[0].to_bool())? tmp_14_i_i_i1_cast_fu_404_p1.read(): sh_assign_2_fu_384_p2.read());
}

void saw::thread_sh_assign_fu_232_p2() {
    sh_assign_fu_232_p2 = (!ap_const_lv9_181.is_01() || !tmp_i_i_i_i_cast3_fu_228_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_181) + sc_biguint<9>(tmp_i_i_i_i_cast3_fu_228_p1.read()));
}

void saw::thread_step_V_fu_334_p3() {
    step_V_fu_334_p3 = (!p_Result_s_reg_567.read()[0].is_01())? sc_lv<24>(): ((p_Result_s_reg_567.read()[0].to_bool())? tmp_12_reg_593.read(): tmp_11_reg_588.read());
}

void saw::thread_tmp_10_fu_311_p4() {
    tmp_10_fu_311_p4 = tmp_17_i_i_i_fu_293_p2.read().range(47, 24);
}

void saw::thread_tmp_11_fu_321_p3() {
    tmp_11_fu_321_p3 = (!isNeg_reg_577.read()[0].is_01())? sc_lv<24>(): ((isNeg_reg_577.read()[0].to_bool())? tmp_1_fu_307_p1.read(): tmp_10_fu_311_p4.read());
}

void saw::thread_tmp_12_fu_328_p2() {
    tmp_12_fu_328_p2 = (!ap_const_lv24_0.is_01() || !tmp_11_fu_321_p3.read().is_01())? sc_lv<24>(): (sc_biguint<24>(ap_const_lv24_0) - sc_biguint<24>(tmp_11_fu_321_p3.read()));
}

void saw::thread_tmp_13_fu_339_p1() {
    tmp_13_fu_339_p1 = esl_sext<32,24>(step_V_fu_334_p3.read());
}

void saw::thread_tmp_13_i_i_i9_cast2_fu_425_p1() {
    tmp_13_i_i_i9_cast2_fu_425_p1 = esl_zext<79,25>(tmp_13_i_i_i9_fu_416_p4.read());
}

void saw::thread_tmp_13_i_i_i9_fu_416_p4() {
    tmp_13_i_i_i9_fu_416_p4 = esl_concat<24,1>(esl_concat<1,23>(ap_const_lv1_1, loc_V_3_reg_624.read()), ap_const_lv1_0);
}

void saw::thread_tmp_13_i_i_i_cast4_fu_273_p1() {
    tmp_13_i_i_i_cast4_fu_273_p1 = esl_zext<79,25>(tmp_13_i_i_i_fu_264_p4.read());
}

void saw::thread_tmp_13_i_i_i_fu_264_p4() {
    tmp_13_i_i_i_fu_264_p4 = esl_concat<24,1>(esl_concat<1,23>(ap_const_lv1_1, loc_V_1_reg_572.read()), ap_const_lv1_0);
}

void saw::thread_tmp_14_fu_198_p1() {
    tmp_14_fu_198_p1 = esl_sext<32,24>(val_V.read());
}

void saw::thread_tmp_14_i_i_i1_cast_fu_404_p1() {
    tmp_14_i_i_i1_cast_fu_404_p1 = esl_sext<9,8>(tmp_14_i_i_i1_fu_398_p2.read());
}

void saw::thread_tmp_14_i_i_i1_fu_398_p2() {
    tmp_14_i_i_i1_fu_398_p2 = (!ap_const_lv8_7F.is_01() || !loc_V_2_fu_366_p4.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_7F) - sc_biguint<8>(loc_V_2_fu_366_p4.read()));
}

void saw::thread_tmp_14_i_i_i_cast_fu_252_p1() {
    tmp_14_i_i_i_cast_fu_252_p1 = esl_sext<9,8>(tmp_14_i_i_i_fu_246_p2.read());
}

void saw::thread_tmp_14_i_i_i_fu_246_p2() {
    tmp_14_i_i_i_fu_246_p2 = (!ap_const_lv8_7F.is_01() || !loc_V_fu_214_p4.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_7F) - sc_biguint<8>(loc_V_fu_214_p4.read()));
}

void saw::thread_tmp_15_i_i_i1_fu_435_p1() {
    tmp_15_i_i_i1_fu_435_p1 = esl_zext<79,32>(sh_assign_3_cast_fu_429_p1.read());
}

void saw::thread_tmp_15_i_i_i_fu_283_p1() {
    tmp_15_i_i_i_fu_283_p1 = esl_zext<79,32>(sh_assign_1_cast_fu_277_p1.read());
}

void saw::thread_tmp_16_fu_459_p1() {
    tmp_16_fu_459_p1 = esl_zext<31,1>(tmp_21_fu_451_p3.read());
}

void saw::thread_tmp_16_i_i_i1_fu_439_p2() {
    tmp_16_i_i_i1_fu_439_p2 = (!sh_assign_3_cast_cas_fu_432_p1.read().is_01())? sc_lv<25>(): tmp_13_i_i_i9_fu_416_p4.read() >> (unsigned short)sh_assign_3_cast_cas_fu_432_p1.read().to_uint();
}

void saw::thread_tmp_16_i_i_i_fu_287_p2() {
    tmp_16_i_i_i_fu_287_p2 = (!sh_assign_1_cast_cas_fu_280_p1.read().is_01())? sc_lv<25>(): tmp_13_i_i_i_fu_264_p4.read() >> (unsigned short)sh_assign_1_cast_cas_fu_280_p1.read().to_uint();
}

void saw::thread_tmp_17_fu_463_p4() {
    tmp_17_fu_463_p4 = tmp_17_i_i_i1_fu_445_p2.read().range(54, 24);
}

void saw::thread_tmp_17_i_i_i1_fu_445_p2() {
    tmp_17_i_i_i1_fu_445_p2 = (!tmp_15_i_i_i1_fu_435_p1.read().is_01())? sc_lv<79>(): tmp_13_i_i_i9_cast2_fu_425_p1.read() << (unsigned short)tmp_15_i_i_i1_fu_435_p1.read().to_uint();
}

void saw::thread_tmp_17_i_i_i_fu_293_p2() {
    tmp_17_i_i_i_fu_293_p2 = (!tmp_15_i_i_i_fu_283_p1.read().is_01())? sc_lv<79>(): tmp_13_i_i_i_cast4_fu_273_p1.read() << (unsigned short)tmp_15_i_i_i_fu_283_p1.read().to_uint();
}

void saw::thread_tmp_19_i_i_i1_fu_480_p1() {
    tmp_19_i_i_i1_fu_480_p1 = esl_zext<32,31>(p_Val2_4_fu_473_p3.read());
}

void saw::thread_tmp_1_fu_307_p1() {
    tmp_1_fu_307_p1 = esl_zext<24,1>(tmp_fu_299_p3.read());
}

void saw::thread_tmp_21_fu_451_p3() {
    tmp_21_fu_451_p3 = tmp_16_i_i_i1_fu_439_p2.read().range(24, 24);
}

void saw::thread_tmp_22_i_i_i1_fu_484_p2() {
    tmp_22_i_i_i1_fu_484_p2 = (!ap_const_lv32_0.is_01() || !tmp_19_i_i_i1_fu_480_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_19_i_i_i1_fu_480_p1.read()));
}

void saw::thread_tmp_3_fu_496_p2() {
    tmp_3_fu_496_p2 = (!p_Val2_6_fu_490_p3.read().is_01() || !ap_const_lv32_BB80.is_01())? sc_lv<1>(): (sc_bigint<32>(p_Val2_6_fu_490_p3.read()) > sc_bigint<32>(ap_const_lv32_BB80));
}

void saw::thread_tmp_8_fu_502_p2() {
    tmp_8_fu_502_p2 = (!p_Val2_6_fu_490_p3.read().is_01() || !ap_const_lv32_FFFE8900.is_01())? sc_lv<32>(): (sc_biguint<32>(p_Val2_6_fu_490_p3.read()) + sc_bigint<32>(ap_const_lv32_FFFE8900));
}

void saw::thread_tmp_9_fu_509_p2() {
    tmp_9_fu_509_p2 = (!tmp_s_reg_603.read().is_01() || !ap_const_lv24_1.is_01())? sc_lv<24>(): (sc_biguint<24>(tmp_s_reg_603.read()) + sc_biguint<24>(ap_const_lv24_1));
}

void saw::thread_tmp_fu_299_p3() {
    tmp_fu_299_p3 = tmp_16_i_i_i_fu_287_p2.read().range(24, 24);
}

void saw::thread_tmp_i_i_i_i1_cast1_fu_380_p1() {
    tmp_i_i_i_i1_cast1_fu_380_p1 = esl_zext<9,8>(loc_V_2_fu_366_p4.read());
}

void saw::thread_tmp_i_i_i_i_cast3_fu_228_p1() {
    tmp_i_i_i_i_cast3_fu_228_p1 = esl_zext<9,8>(loc_V_fu_214_p4.read());
}

void saw::thread_tmp_s_fu_344_p2() {
    tmp_s_fu_344_p2 = (!step_V_fu_334_p3.read().is_01() || !val_V.read().is_01())? sc_lv<24>(): (sc_biguint<24>(step_V_fu_334_p3.read()) + sc_biguint<24>(val_V.read()));
}

void saw::thread_user_writing_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        user_writing_V_0_ack_out = ap_const_logic_1;
    } else {
        user_writing_V_0_ack_out = ap_const_logic_0;
    }
}

void saw::thread_val_V_flag_phi_fu_125_p6() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, user_writing_V_read_reg_527.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_496_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, user_writing_V_read_reg_527.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_496_p2.read())))) {
        val_V_flag_phi_fu_125_p6 = ap_const_lv1_1;
    } else {
        val_V_flag_phi_fu_125_p6 = val_V_flag_reg_121.read();
    }
}

void saw::thread_val_V_new_phi_fu_140_p6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, user_writing_V_read_reg_527.read()))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_496_p2.read())) {
            val_V_new_phi_fu_140_p6 = tmp_s_reg_603.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_496_p2.read())) {
            val_V_new_phi_fu_140_p6 = tmp_9_fu_509_p2.read();
        } else {
            val_V_new_phi_fu_140_p6 = val_V_new_reg_136.read();
        }
    } else {
        val_V_new_phi_fu_140_p6 = val_V_new_reg_136.read();
    }
}

void saw::thread_vol_0_ack_out() {
    if ((esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        vol_0_ack_out = ap_const_logic_1;
    } else {
        vol_0_ack_out = ap_const_logic_0;
    }
}

void saw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, grp_read_fu_96_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state42;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 134217728 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state29;
            } else {
                ap_NS_fsm = ap_ST_fsm_state28;
            }
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            if ((esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state42;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<42>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void saw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"out_V_TDATA\" :  \"" << out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_TVALID\" :  \"" << out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V_TREADY\" :  \"" << out_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

